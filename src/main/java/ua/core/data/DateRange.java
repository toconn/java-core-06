package ua.core.data;

import java.util.Date;

import ua.core.utils.DateUtils;


/**
 * Java Bean DateRange
 *
 * Generated by Code Blaster.
 *
*/
public class DateRange {

	public static class Builder {

		private Date endTimestamp;
		private Date startTimestamp;

		public Builder endTimestamp (Date endTimestamp) { this.endTimestamp = endTimestamp; return this; }
		public Builder startTimestamp (Date startTimestamp) { this.startTimestamp = startTimestamp; return this; }

		public DateRange build() { return new DateRange (this); }
	}

	private Date endTimestamp;
	private Date startTimestamp;


	public DateRange() {}

	public DateRange (Date startTimestamp, Date endTimestamp) {
		this.startTimestamp = startTimestamp;
		this.endTimestamp = endTimestamp;
	}

	private DateRange (Builder builder) {

		this.endTimestamp = builder.endTimestamp;
		this.startTimestamp = builder.startTimestamp;
	}


	public Date getEndTimestamp() { return endTimestamp; }
	public Date getStartTimestamp() { return startTimestamp; }

	public void setEndTimestamp (Date endTimestamp) { this.endTimestamp = endTimestamp; }
	public void setStartTimestamp (Date startTimestamp) { this.startTimestamp = startTimestamp; }

	@Override
	public String toString() {
		return "DateRange [startTimestamp=" + startTimestamp + ", endTimestamp=" + endTimestamp + "]";
	}
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Do Not Overwrite With Generated Code...                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	
	public boolean isAfterRange (Date timestamp) {
		
		if (timestamp != null) {
			if (this.endTimestamp != null) {
				return timestamp.getTime() > this.endTimestamp.getTime();
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}
	
	public boolean isBeforeRange (Date timestamp) {
		
		if (timestamp != null) {
			
			if (this.startTimestamp != null) {
				return timestamp.getTime() < this.startTimestamp.getTime();
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}
	
	public boolean isInRange (Date timestamp) {
		
		return ! (isBeforeRange (timestamp) || isAfterRange (timestamp));
	}

	public long lengthInDays() {
		
		return DateUtils.dayCount (startTimestamp, endTimestamp);
	}
}
